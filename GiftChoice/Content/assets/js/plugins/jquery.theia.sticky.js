!function (i) { i.fn.theiaStickySidebar = function (t) { var e, o, a, s, n, d; function r(t, e) { var o, a; return !0 === t.initialized || !(i("body").width() < t.minWidth) && (a = e, (o = t).initialized = !0, 0 === i("#theia-sticky-sidebar-stylesheet-" + o.namespace).length && i("head").append(i('<style id="theia-sticky-sidebar-stylesheet-' + o.namespace + '">.theiaStickySidebar:after {content: ""; display: table; clear: both;}</style>')), a.each((function () { var t, e = {}; if (e.sidebar = i(this), e.options = o || {}, e.container = i(e.options.containerSelector), 0 == e.container.length && (e.container = e.sidebar.parent()), e.sidebar.parents().css("-webkit-transform", "none"), e.sidebar.css({ position: e.options.defaultPosition, overflow: "visible", "-webkit-box-sizing": "border-box", "-moz-box-sizing": "border-box", "box-sizing": "border-box" }), e.stickySidebar = e.sidebar.find(".theiaStickySidebar"), 0 == e.stickySidebar.length) { var a = /(?:text|application)\/(?:x-)?(?:javascript|ecmascript)/i; e.sidebar.find("script").filter((function (i, t) { return 0 === t.type.length || t.type.match(a) })).remove(), e.stickySidebar = i("<div>").addClass("theiaStickySidebar").append(e.sidebar.children()), e.sidebar.append(e.stickySidebar) } e.marginBottom = parseInt(e.sidebar.css("margin-bottom")), e.paddingTop = parseInt(e.sidebar.css("padding-top")), e.paddingBottom = parseInt(e.sidebar.css("padding-bottom")); var s, n, d = e.stickySidebar.offset().top, r = e.stickySidebar.outerHeight(); function p() { e.fixedScrollTop = 0, e.sidebar.css({ "min-height": "1px" }), e.stickySidebar.css({ position: "static", width: "", transform: "none" }) } e.stickySidebar.css("padding-top", 1), e.stickySidebar.css("padding-bottom", 1), d -= e.stickySidebar.offset().top, r = e.stickySidebar.outerHeight() - r - d, 0 == d ? (e.stickySidebar.css("padding-top", 0), e.stickySidebarPaddingTop = 0) : e.stickySidebarPaddingTop = 1, 0 == r ? (e.stickySidebar.css("padding-bottom", 0), e.stickySidebarPaddingBottom = 0) : e.stickySidebarPaddingBottom = 1, e.previousScrollTop = null, e.fixedScrollTop = 0, p(), e.onScroll = function (t) { if (t.stickySidebar.is(":visible")) { if (i("body").width() < t.options.minWidth || t.options.disableOnResponsiveLayouts && t.sidebar.outerWidth("none" == t.sidebar.css("float")) + 50 > t.container.width()) return void p(); var e = i(document).scrollTop(), a = "static"; if (e >= t.sidebar.offset().top + (t.paddingTop - t.options.additionalMarginTop)) { var s, n, d, r = t.paddingTop + o.additionalMarginTop, b = t.paddingBottom + t.marginBottom + o.additionalMarginBottom, l = t.sidebar.offset().top, h = t.sidebar.offset().top + (s = t.container, n = s.height(), s.children().each((function () { n = Math.max(n, i(this).height()) })), n), g = 0 + o.additionalMarginTop; d = t.stickySidebar.outerHeight() + r + b < i(window).height() ? g + t.stickySidebar.outerHeight() : i(window).height() - t.marginBottom - t.paddingBottom - o.additionalMarginBottom; var f = l - e + t.paddingTop, S = h - e - t.paddingBottom - t.marginBottom, m = t.stickySidebar.offset().top - e, y = t.previousScrollTop - e; "fixed" == t.stickySidebar.css("position") && "modern" == t.options.sidebarBehavior && (m += y), "stick-to-top" == t.options.sidebarBehavior && (m = o.additionalMarginTop), "stick-to-bottom" == t.options.sidebarBehavior && (m = d - t.stickySidebar.outerHeight()), m = Math.min(m = Math.max(m = y > 0 ? Math.min(m, g) : Math.max(m, d - t.stickySidebar.outerHeight()), f), S - t.stickySidebar.outerHeight()); var u = t.container.height() == t.stickySidebar.outerHeight(); a = !u && m == g || !u && m == d - t.stickySidebar.outerHeight() ? "fixed" : e + m - t.sidebar.offset().top - t.paddingTop <= o.additionalMarginTop ? "static" : "absolute" } if ("fixed" == a) { var k = i(document).scrollLeft(); t.stickySidebar.css({ position: "fixed", width: c(t.stickySidebar) + "px", transform: "translateY(" + m + "px)", left: t.sidebar.offset().left + parseInt(t.sidebar.css("padding-left")) - k + "px", top: "0px" }) } else if ("absolute" == a) { var v = {}; "absolute" != t.stickySidebar.css("position") && (v.position = "absolute", v.transform = "translateY(" + (e + m - t.sidebar.offset().top - t.stickySidebarPaddingTop - t.stickySidebarPaddingBottom) + "px)", v.top = "0px"), v.width = c(t.stickySidebar) + "px", v.left = "", t.stickySidebar.css(v) } else "static" == a && p(); "static" != a && 1 == t.options.updateSidebarHeight && t.sidebar.css({ "min-height": t.stickySidebar.outerHeight() + t.stickySidebar.offset().top - t.sidebar.offset().top + t.paddingBottom }), t.previousScrollTop = e } }, e.onScroll(e), i(document).on("scroll." + e.options.namespace, (s = e, function () { s.onScroll(s) })), i(window).on("resize." + e.options.namespace, (n = e, function () { n.stickySidebar.css({ position: "static" }), n.onScroll(n) })), "undefined" != typeof ResizeSensor && new ResizeSensor(e.stickySidebar[0], (t = e, function () { t.onScroll(t) })) })), !0) } function c(i) { var t; try { t = i[0].getBoundingClientRect().width } catch (i) { } return void 0 === t && (t = i.width()), t } return (t = i.extend({ containerSelector: "", additionalMarginTop: 100, additionalMarginBottom: 0, updateSidebarHeight: !0, minWidth: 0, disableOnResponsiveLayouts: !0, sidebarBehavior: "modern", defaultPosition: "relative", namespace: "TSS" }, t)).additionalMarginTop = parseInt(t.additionalMarginTop) || 0, t.additionalMarginBottom = parseInt(t.additionalMarginBottom) || 0, !r(e = t, o = this) && (console.log("TSS: Body width smaller than options.minWidth. Init is delayed."), i(document).on("scroll." + e.namespace, (a = e, s = o, function (t) { r(a, s) && i(this).unbind(t) })), i(window).on("resize." + e.namespace, (n = e, d = o, function (t) { r(n, d) && i(this).unbind(t) }))), this } }(jQuery);