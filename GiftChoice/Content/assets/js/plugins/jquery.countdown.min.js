!function (t) { "use strict"; "function" == typeof define && define.amd ? define(["jquery"], t) : t(jQuery) }((function (t) { "use strict"; function e(t) { return RegExp(t.toString().replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1")) } function s(t, e) { var s = "s", i = ""; return t && (1 === (t = t.replace(/(:|;|\s)/gi, "").split(/\,/)).length ? s = t[0] : (i = t[0], s = t[1])), Math.abs(e) > 1 ? s : i } var i = [], n = [], o = { precision: 100, elapse: !1, defer: !1 }; n.push(/^[0-9]*$/.source), n.push(/([0-9]{1,2}\/){2}[0-9]{4}( [0-9]{1,2}(:[0-9]{2}){2})?/.source), n.push(/[0-9]{4}([\/\-][0-9]{1,2}){2}( [0-9]{1,2}(:[0-9]{2}){2})?/.source), n = RegExp(n.join("|")); var a = { Y: "years", m: "months", n: "daysToMonth", d: "daysToWeek", w: "weeks", W: "weeksToMonth", H: "hours", M: "minutes", S: "seconds", D: "totalDays", I: "totalHours", N: "totalMinutes", T: "totalSeconds" }, h = function (e, s, n) { this.el = e, this.$el = t(e), this.interval = null, this.offset = {}, this.options = t.extend({}, o), this.instanceNumber = i.length, i.push(this), this.$el.data("countdown-instance", this.instanceNumber), n && ("function" == typeof n ? (this.$el.on("update.countdown", n), this.$el.on("stoped.countdown", n), this.$el.on("finish.countdown", n)) : this.options = t.extend({}, o, n)), this.setFinalDate(s), !1 === this.options.defer && this.start() }; t.extend(h.prototype, { start: function () { null !== this.interval && clearInterval(this.interval); var t = this; this.update(), this.interval = setInterval((function () { t.update.call(t) }), this.options.precision) }, stop: function () { clearInterval(this.interval), this.interval = null, this.dispatchEvent("stoped") }, toggle: function () { this.interval ? this.stop() : this.start() }, pause: function () { this.stop() }, resume: function () { this.start() }, remove: function () { this.stop.call(this), i[this.instanceNumber] = null, delete this.$el.data().countdownInstance }, setFinalDate: function (t) { this.finalDate = function (t) { if (t instanceof Date) return t; if (String(t).match(n)) return String(t).match(/^[0-9]*$/) && (t = Number(t)), String(t).match(/\-/) && (t = String(t).replace(/\-/g, "/")), new Date(t); throw Error("Couldn't cast `" + t + "` to a date object.") }(t) }, update: function () { if (0 !== this.$el.closest("html").length) { var e, s = void 0 !== t._data(this.el, "events"), i = new Date; e = Math.ceil((e = this.finalDate.getTime() - i.getTime()) / 1e3), e = !this.options.elapse && e < 0 ? 0 : Math.abs(e), this.totalSecsLeft !== e && s && (this.totalSecsLeft = e, this.elapsed = i >= this.finalDate, this.offset = { seconds: this.totalSecsLeft % 60, minutes: Math.floor(this.totalSecsLeft / 60) % 60, hours: Math.floor(this.totalSecsLeft / 60 / 60) % 24, days: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7, daysToWeek: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7, daysToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 % 30.4368), weeks: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7), weeksToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7) % 4, months: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 30.4368), years: Math.abs(this.finalDate.getFullYear() - i.getFullYear()), totalDays: Math.floor(this.totalSecsLeft / 60 / 60 / 24), totalHours: Math.floor(this.totalSecsLeft / 60 / 60), totalMinutes: Math.floor(this.totalSecsLeft / 60), totalSeconds: this.totalSecsLeft }, this.options.elapse || 0 !== this.totalSecsLeft ? this.dispatchEvent("update") : (this.stop(), this.dispatchEvent("finish"))) } else this.remove() }, dispatchEvent: function (i) { var n, o = t.Event(i + ".countdown"); o.finalDate = this.finalDate, o.elapsed = this.elapsed, o.offset = t.extend({}, this.offset), o.strftime = (n = this.offset, function (t) { var i = t.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi); if (i) for (var o = 0, h = i.length; o < h; ++o) { var l = i[o].match(/%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/), r = e(l[0]), c = l[1] || "", f = l[3] || "", u = null; l = l[2], a.hasOwnProperty(l) && (u = Number(n[u = a[l]])), null !== u && ("!" === c && (u = s(f, u)), "" === c && u < 10 && (u = "0" + u.toString()), t = t.replace(r, u.toString())) } return t.replace(/%%/, "%") }), this.$el.trigger(o) } }), t.fn.countdown = function () { var e = Array.prototype.slice.call(arguments, 0); return this.each((function () { var s = t(this).data("countdown-instance"); if (void 0 !== s) { var n = i[s], o = e[0]; h.prototype.hasOwnProperty(o) ? n[o].apply(n, e.slice(1)) : null === String(o).match(/^[$A-Z_][0-9A-Z_$]*$/i) ? (n.setFinalDate.call(n, o), n.start()) : t.error("Method %s does not exist on jQuery.countdown".replace(/\%s/gi, o)) } else new h(this, e[0], e[1]) })) } }));